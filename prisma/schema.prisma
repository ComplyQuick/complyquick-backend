// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id              String         @id @default(uuid())
  name            String
  domain          String         @unique
  adminEmail      String         @map("admin_email")
  adminPassword   String         @map("admin_password")
  createdAt       DateTime       @default(now()) @map("created_at")
  users           User[]
  details         TenantDetails?
  courses         TenantCourse[]

  @@map("tenant")
}

model TenantDetails {
  id                    String   @id @default(uuid())
  tenantId             String   @unique @map("tenant_id")
  presidingOfficerEmail String?  @map("presiding_officer_email")
  poshCommitteeEmail    String?  @map("posh_committee_email")
  hrContactName         String?  @map("hr_contact_name")
  hrContactEmail        String?  @map("hr_contact_email")
  hrContactPhone        String?  @map("hr_contact_phone")
  ceoName              String?  @map("ceo_name")
  ceoEmail             String?  @map("ceo_email")
  ceoContact           String?  @map("ceo_contact")
  ctoName              String?  @map("cto_name")
  ctoEmail             String?  @map("cto_email")
  ctoContact           String?  @map("cto_contact")
  ccoEmail             String?  @map("cco_email")
  ccoContact           String?  @map("cco_contact")
  croName              String?  @map("cro_name")
  croEmail             String?  @map("cro_email")
  croContact           String?  @map("cro_contact")
  legalOfficerName     String?  @map("legal_officer_name")
  legalOfficerEmail    String?  @map("legal_officer_email")
  legalOfficerContact  String?  @map("legal_officer_contact")
  tenant               Tenant   @relation(fields: [tenantId], references: [id])

  @@map("tenant_details")
}

model User {
  id           String       @id @default(uuid())
  tenantId     String?     @map("tenant_id")
  email        String      @unique
  name         String
  password     String?
  role         UserRole    @default(USER)
  createdAt    DateTime    @default(now()) @map("created_at")
  tenant       Tenant?     @relation(fields: [tenantId], references: [id])
  enrollments  Enrollment[]
  certificates Certificate[]
  userRoles    UserRole[]
  mcqAnswers   UserMCQAnswer[]

  @@map("users")
}

model Course {
  id                String        @id @default(uuid())
  title             String
  description       String?
  duration          Int
  tags              String
  learningObjectives String
  targetAudience    String
  materialUrl       String
  videoUrl          String?
  slides            Json[]
  mcqs              MCQ[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  enrollments       Enrollment[]
  tenants           TenantCourse[]
  slideExplanations SlideExplanation[]

  @@map("course")
}

model Enrollment {
  id        String          @id @default(uuid())
  userId    String         @map("user_id")
  courseId  String         @map("course_id")
  progress  Decimal        @default(0) @db.Decimal(5,2)
  status    EnrollmentStatus @default(IN_PROGRESS)
  user      User           @relation(fields: [userId], references: [id])
  course    Course         @relation(fields: [courseId], references: [id])

  @@map("enrollment")
}

model Certificate {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  courseId      String   @map("course_id")
  certificateUrl String  @map("certificate_url")
  issuedAt      DateTime @default(now()) @map("issued_at")
  user          User     @relation(fields: [userId], references: [id])

  @@map("certificate")
}

model TenantCourse {
  id            String   @id @default(uuid())
  tenantId      String   @map("tenant_id")
  courseId      String   @map("course_id")
  explanations  Json?    // Add this field
  assignedAt    DateTime @default(now()) @map("assigned_at")
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  course        Course   @relation(fields: [courseId], references: [id])

  @@map("tenant_course")
}

model MCQ {
  id             String   @id @default(uuid())
  question       String
  options        String[] // Array of options
  correctAnswer  String
  explanation    String?  // AI-generated explanation
  courseId       String
  course         Course   @relation(fields: [courseId], references: [id])
  userAnswers    UserMCQAnswer[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("mcqs")
}

model UserMCQAnswer {
  id          String   @id @default(uuid())
  userId      String
  mcqId       String
  answer      String
  isCorrect   Boolean
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  mcq         MCQ      @relation(fields: [mcqId], references: [id])

  @@map("user_mcq_answers")
}

model SlideExplanation {
  id          String   @id @default(uuid())
  courseId    String
  slideNumber Int
  explanation String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  course      Course   @relation(fields: [courseId], references: [id])

  @@map("slide_explanation")
}

model OrganizationInterest {
  id              String   @id @default(uuid())
  organizationName String
  email           String
  fullName        String
  message         String
  status          String   @default("PENDING") // PENDING, CONFIRMED, REGISTERED
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([email, organizationName])
  @@map("organization_interest")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

enum EnrollmentStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

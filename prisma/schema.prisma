generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id            String         @id @default(uuid())
  name          String
  domain        String         @unique
  createdAt     DateTime       @default(now()) @map("created_at")
  adminEmail    String         @map("admin_email")
  adminPassword String         @map("admin_password")
  courses       TenantCourse[]
  details       TenantDetails?
  users         User[]

  @@map("tenant")
}

model TenantDetails {
  id                    String  @id @default(uuid())
  tenantId              String  @unique @map("tenant_id")
  hrContactName         String? @map("hr_contact_name")
  hrContactEmail        String? @map("hr_contact_email")
  hrContactPhone        String? @map("hr_contact_phone")
  ceoName               String? @map("ceo_name")
  ceoEmail              String? @map("ceo_email")
  ceoContact            String? @map("ceo_contact")
  ctoName               String? @map("cto_name")
  ctoEmail              String? @map("cto_email")
  ctoContact            String? @map("cto_contact")
  tenant                Tenant  @relation(fields: [tenantId], references: [id])

  @@map("tenant_details")
}

model User {
  id           String          @id @default(uuid())
  tenantId     String?         @map("tenant_id")
  email        String          @unique
  name         String
  role         UserRole        @default(USER)
  createdAt    DateTime        @default(now()) @map("created_at")
  userRoles    UserRole[]
  password     String?
  certificates Certificate[]
  enrollments  Enrollment[]
  mcqAnswers   UserMCQAnswer[]
  tenant       Tenant?         @relation(fields: [tenantId], references: [id])

  @@map("users")
}

model Course {
  id                 String             @id @default(uuid())
  title              String
  description        String?
  createdAt          DateTime           @default(now())
  learningObjectives String
  materialUrl        String
  slides             Json[]
  tags               String
  updatedAt          DateTime           @updatedAt
  videoUrl           String?
  enrollments        Enrollment[]
  mcqs               MCQ[]
  slideExplanations  SlideExplanation[]
  tenants            TenantCourse[]

  @@map("course")
}

model Enrollment {
  id       String           @id @default(uuid())
  userId   String           @map("user_id")
  courseId String           @map("course_id")
  progress Decimal          @default(0) @db.Decimal(5, 2)
  status   EnrollmentStatus @default(IN_PROGRESS)
  course   Course           @relation(fields: [courseId], references: [id])
  user     User             @relation(fields: [userId], references: [id])

  @@map("enrollment")
}

model Certificate {
  id             String   @id @default(uuid())
  userId         String   @map("user_id")
  courseId       String   @map("course_id")
  certificateUrl String   @map("certificate_url")
  issuedAt       DateTime @default(now()) @map("issued_at")
  user           User     @relation(fields: [userId], references: [id])

  @@map("certificate")
}

model TenantCourse {
  id           String   @id @default(uuid())
  tenantId     String   @map("tenant_id")
  courseId     String   @map("course_id")
  assignedAt   DateTime @default(now()) @map("assigned_at")
  explanations Json?
  skippable    Boolean  @default(false)
  mandatory    Boolean  @default(false)
  retryType    RetryType @default(SAME)
  course       Course   @relation(fields: [courseId], references: [id])
  tenant       Tenant   @relation(fields: [tenantId], references: [id])

  @@map("tenant_course")
}

model MCQ {
  id            String          @id @default(uuid())
  question      String
  options       String[]
  correctAnswer String
  explanation   String?
  courseId      String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  course        Course          @relation(fields: [courseId], references: [id])
  userAnswers   UserMCQAnswer[]

  @@map("mcqs")
}

model UserMCQAnswer {
  id        String   @id @default(uuid())
  userId    String
  mcqId     String
  answer    String
  isCorrect Boolean
  createdAt DateTime @default(now())
  mcq       MCQ      @relation(fields: [mcqId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("user_mcq_answers")
}

model SlideExplanation {
  id                  String   @id @default(uuid())
  courseId            String
  slideNumber         Int
  explanation         String
  explanation_audio   String?
  explanation_subtitle String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  course              Course   @relation(fields: [courseId], references: [id])

  @@map("slide_explanation")
}

model OrganizationInterest {
  id               String   @id @default(uuid())
  organizationName String
  email            String
  fullName         String
  message          String
  status           String   @default("PENDING")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([email, organizationName])
  @@map("organization_interest")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

enum EnrollmentStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum RetryType {
  SAME
  DIFFERENT
}
